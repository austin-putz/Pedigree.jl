var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [Pedigree]\nOrder   = [:function]","category":"page"},{"location":"api/#Pedigree.makeA-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"Pedigree.makeA","text":"makeA(ped::DataFrame)\n\nCreate the additive relationship matrix (A matrix) using the tabular method.\n\nThis function creates the numerator relationship matrix, which represents the  additive genetic relationships between all individuals in the pedigree. The method used is the classic tabular method.\n\nArguments\n\nped::DataFrame: A DataFrame with 3 columns representing animal ID, sire ID, and dam ID. The IDs must be integers from 1 to n, with parents appearing before their offspring. Missing parents must be coded as 0.\n\nReturns\n\nMatrix{Float64}: The additive relationship matrix (A), where element A[i,j] is the additive genetic relationship between individuals i and j.\n\nRequirements\n\nThe pedigree must be sorted so that parents appear before their offspring\nAnimal IDs must be integers from 1 to n\nMissing parents must be coded as 0\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree (must be numeric and ordered 1 to n)\nped = DataFrame(\n    animal = [1, 2, 3, 4, 5, 6], \n    sire   = [0, 0, 1, 1, 4, 5],\n    dam    = [0, 0, 2, 0, 3, 2]\n)\n\n# Create the A matrix\nA = makeA(ped)\n\nNotes\n\nFor large pedigrees, this may be memory intensive. The diagonal elements contain the inbreeding coefficients plus 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#Pedigree.renum_ped-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"Pedigree.renum_ped","text":"renum_ped(ped::DataFrame)\n\nRenumber a pedigree from 1 to n and convert string IDs to integers.\n\nThis function takes a pedigree with string IDs and renumbers all animals from 1 to n, maintaining the pedigree relationships. It returns a DataFrame with both the new numeric  IDs and the original string IDs.\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\n\nReturns\n\nDataFrame: A new DataFrame with 6 columns:\nRenumID: Renumbered animal ID (1 to n)\nSireRenumID: Renumbered sire ID\nDamRenumID: Renumbered dam ID\nanimal: Original animal ID\nsire: Original sire ID\ndam: Original dam ID\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Renumber the pedigree\nrenum_ped = renum_ped(ped)\n\n\n\n\n\n","category":"method"},{"location":"api/#Pedigree.sort_ped-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"Pedigree.sort_ped","text":"sort_ped(ped::DataFrame; maxrounds=1000)\n\nSort a pedigree in ancestral order, ensuring parents appear before their offspring.\n\nThis function sorts the pedigree so that all ancestors appear before their descendants. It also adds any missing ancestors to the top of the pedigree with unknown parentage.\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\nmaxrounds::Int=1000: Maximum number of sorting iterations to perform before giving up.\n\nReturns\n\nDataFrame: A new DataFrame with the pedigree sorted in ancestral order.\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Sort the pedigree\nsorted_ped = sort_ped(ped)\n\n\n\n\n\n","category":"method"},{"location":"api/#Pedigree.stack_ancestors-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"Pedigree.stack_ancestors","text":"stack_ancestors(ped::DataFrame)\n\nAdd missing ancestors to the pedigree.\n\nThis function finds all individuals that appear as parents but are not present in the pedigree as individuals. These missing ancestors are added to the top of the pedigree with unknown parentage (sire and dam set to \"0\").\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\n\nReturns\n\nDataFrame: A new DataFrame with ancestors added at the top, with each row containing an animal ID and its parents.\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a simple pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\"],\n    sire = [\"X\", \"0\", \"B\"],\n    dam = [\"Y\", \"0\", \"A\"]\n)\n\n# Stack missing ancestors\nstacked_ped = stack_ancestors(ped)\n\nIn this example, \"X\" and \"Y\" would be added to the pedigree with \"0\" as their parents.\n\n\n\n\n\n","category":"method"},{"location":"stack_ancestors/#Stack-Ancestors","page":"Stack Ancestors","title":"Stack Ancestors","text":"","category":"section"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"stack_ancestors","category":"page"},{"location":"stack_ancestors/#Pedigree.stack_ancestors","page":"Stack Ancestors","title":"Pedigree.stack_ancestors","text":"stack_ancestors(ped::DataFrame)\n\nAdd missing ancestors to the pedigree.\n\nThis function finds all individuals that appear as parents but are not present in the pedigree as individuals. These missing ancestors are added to the top of the pedigree with unknown parentage (sire and dam set to \"0\").\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\n\nReturns\n\nDataFrame: A new DataFrame with ancestors added at the top, with each row containing an animal ID and its parents.\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a simple pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\"],\n    sire = [\"X\", \"0\", \"B\"],\n    dam = [\"Y\", \"0\", \"A\"]\n)\n\n# Stack missing ancestors\nstacked_ped = stack_ancestors(ped)\n\nIn this example, \"X\" and \"Y\" would be added to the pedigree with \"0\" as their parents.\n\n\n\n\n\n","category":"function"},{"location":"stack_ancestors/#Description","page":"Stack Ancestors","title":"Description","text":"","category":"section"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"The stack_ancestors function identifies and adds missing ancestors to a pedigree. Animals that appear as parents but are not in the pedigree as individuals are added as new rows with unknown parentage.","category":"page"},{"location":"stack_ancestors/#Usage","page":"Stack Ancestors","title":"Usage","text":"","category":"section"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"using Pedigree\nusing DataFrames\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\"],\n    sire = [\"X\", \"0\", \"B\"],\n    dam = [\"Y\", \"0\", \"A\"]\n)\n\n# Stack missing ancestors\nstacked_ped = stack_ancestors(ped)","category":"page"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"In this example, \"X\" and \"Y\" would be added to the pedigree with \"0\" (unknown) parents.","category":"page"},{"location":"stack_ancestors/#Arguments","page":"Stack Ancestors","title":"Arguments","text":"","category":"section"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"ped::DataFrame: A DataFrame with at least 3 columns:\nAnimal ID\nSire ID\nDam ID","category":"page"},{"location":"stack_ancestors/#Returns","page":"Stack Ancestors","title":"Returns","text":"","category":"section"},{"location":"stack_ancestors/","page":"Stack Ancestors","title":"Stack Ancestors","text":"A new DataFrame with ancestors added at the top, where each row represents an animal with its sire and dam.","category":"page"},{"location":"renum_ped/#Renumber-Pedigree","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"","category":"section"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"renum_ped","category":"page"},{"location":"renum_ped/#Pedigree.renum_ped","page":"Renumber Pedigree","title":"Pedigree.renum_ped","text":"renum_ped(ped::DataFrame)\n\nRenumber a pedigree from 1 to n and convert string IDs to integers.\n\nThis function takes a pedigree with string IDs and renumbers all animals from 1 to n, maintaining the pedigree relationships. It returns a DataFrame with both the new numeric  IDs and the original string IDs.\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\n\nReturns\n\nDataFrame: A new DataFrame with 6 columns:\nRenumID: Renumbered animal ID (1 to n)\nSireRenumID: Renumbered sire ID\nDamRenumID: Renumbered dam ID\nanimal: Original animal ID\nsire: Original sire ID\ndam: Original dam ID\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Renumber the pedigree\nrenum_ped = renum_ped(ped)\n\n\n\n\n\n","category":"function"},{"location":"renum_ped/#Description","page":"Renumber Pedigree","title":"Description","text":"","category":"section"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"The renum_ped function renumbers a pedigree from 1 to n, creating a new DataFrame with both the original IDs and the renumbered IDs. This is often necessary for computational efficiency in pedigree operations, especially when creating relationship matrices.","category":"page"},{"location":"renum_ped/#Usage","page":"Renumber Pedigree","title":"Usage","text":"","category":"section"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"using Pedigree\nusing DataFrames\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Renumber the pedigree\nrenum_ped = renum_ped(ped)","category":"page"},{"location":"renum_ped/#Arguments","page":"Renumber Pedigree","title":"Arguments","text":"","category":"section"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"ped::DataFrame: A DataFrame with at least 3 columns:\nAnimal ID\nSire ID\nDam ID","category":"page"},{"location":"renum_ped/#Returns","page":"Renumber Pedigree","title":"Returns","text":"","category":"section"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"A new DataFrame with the following columns:","category":"page"},{"location":"renum_ped/","page":"Renumber Pedigree","title":"Renumber Pedigree","text":"RenumID: Renumbered animal ID (1 to n)\nSireRenumID: Renumbered sire ID\nDamRenumID: Renumbered dam ID\nanimal: Original animal ID\nsire: Original sire ID\ndam: Original dam ID","category":"page"},{"location":"sort_ped/#Sort-Pedigree","page":"Sort Pedigree","title":"Sort Pedigree","text":"","category":"section"},{"location":"sort_ped/","page":"Sort Pedigree","title":"Sort Pedigree","text":"sort_ped","category":"page"},{"location":"sort_ped/#Pedigree.sort_ped","page":"Sort Pedigree","title":"Pedigree.sort_ped","text":"sort_ped(ped::DataFrame; maxrounds=1000)\n\nSort a pedigree in ancestral order, ensuring parents appear before their offspring.\n\nThis function sorts the pedigree so that all ancestors appear before their descendants. It also adds any missing ancestors to the top of the pedigree with unknown parentage.\n\nArguments\n\nped::DataFrame: A DataFrame with at least 3 columns representing animal ID, sire ID, and dam ID.\nmaxrounds::Int=1000: Maximum number of sorting iterations to perform before giving up.\n\nReturns\n\nDataFrame: A new DataFrame with the pedigree sorted in ancestral order.\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Sort the pedigree\nsorted_ped = sort_ped(ped)\n\n\n\n\n\n","category":"function"},{"location":"sort_ped/#Description","page":"Sort Pedigree","title":"Description","text":"","category":"section"},{"location":"sort_ped/","page":"Sort Pedigree","title":"Sort Pedigree","text":"The sort_ped function sorts a pedigree in ancestral order, ensuring that parents appear before their offspring. This is important for many pedigree operations, particularly for constructing relationship matrices.","category":"page"},{"location":"sort_ped/#Usage","page":"Sort Pedigree","title":"Usage","text":"","category":"section"},{"location":"sort_ped/","page":"Sort Pedigree","title":"Sort Pedigree","text":"using Pedigree\nusing DataFrames\n\n# Create a sample pedigree\nped = DataFrame(\n    animal = [\"A\", \"B\", \"C\", \"D\"],\n    sire = [\"0\", \"0\", \"B\", \"B\"],\n    dam = [\"0\", \"0\", \"A\", \"C\"]\n)\n\n# Sort the pedigree\nsorted_ped = sort_ped(ped)","category":"page"},{"location":"sort_ped/#Arguments","page":"Sort Pedigree","title":"Arguments","text":"","category":"section"},{"location":"sort_ped/","page":"Sort Pedigree","title":"Sort Pedigree","text":"ped::DataFrame: A DataFrame with at least 3 columns:\nAnimal ID\nSire ID\nDam ID\nmaxrounds::Int: (Optional) Maximum number of iterations to attempt sorting (default: 1000)","category":"page"},{"location":"sort_ped/#Returns","page":"Sort Pedigree","title":"Returns","text":"","category":"section"},{"location":"sort_ped/","page":"Sort Pedigree","title":"Sort Pedigree","text":"A new DataFrame containing the sorted pedigree with ancestors at the top and descendants below.","category":"page"},{"location":"#Pedigree.jl","page":"Home","title":"Pedigree.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Pedigree.jl, a Julia package for pedigree analysis.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Pedigree\")","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pedigree.jl provides functionality for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Stacking ancestors for pedigree analysis\nSorting pedigrees\nRenumbering pedigrees\nCreating the additive relationship matrix (A matrix)","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pedigree\n\n# Example code...","category":"page"},{"location":"makeA/#Make-A-Matrix","page":"Make A Matrix","title":"Make A Matrix","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"makeA","category":"page"},{"location":"makeA/#Pedigree.makeA","page":"Make A Matrix","title":"Pedigree.makeA","text":"makeA(ped::DataFrame)\n\nCreate the additive relationship matrix (A matrix) using the tabular method.\n\nThis function creates the numerator relationship matrix, which represents the  additive genetic relationships between all individuals in the pedigree. The method used is the classic tabular method.\n\nArguments\n\nped::DataFrame: A DataFrame with 3 columns representing animal ID, sire ID, and dam ID. The IDs must be integers from 1 to n, with parents appearing before their offspring. Missing parents must be coded as 0.\n\nReturns\n\nMatrix{Float64}: The additive relationship matrix (A), where element A[i,j] is the additive genetic relationship between individuals i and j.\n\nRequirements\n\nThe pedigree must be sorted so that parents appear before their offspring\nAnimal IDs must be integers from 1 to n\nMissing parents must be coded as 0\n\nExamples\n\nusing DataFrames\nusing Pedigree\n\n# Create a sample pedigree (must be numeric and ordered 1 to n)\nped = DataFrame(\n    animal = [1, 2, 3, 4, 5, 6], \n    sire   = [0, 0, 1, 1, 4, 5],\n    dam    = [0, 0, 2, 0, 3, 2]\n)\n\n# Create the A matrix\nA = makeA(ped)\n\nNotes\n\nFor large pedigrees, this may be memory intensive. The diagonal elements contain the inbreeding coefficients plus 1.\n\n\n\n\n\n","category":"function"},{"location":"makeA/#Description","page":"Make A Matrix","title":"Description","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"The makeA function creates an additive relationship matrix (A matrix) using the tabular method. This matrix represents the additive genetic relationships between individuals in a pedigree.","category":"page"},{"location":"makeA/#Usage","page":"Make A Matrix","title":"Usage","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"using Pedigree\nusing DataFrames\n\n# Create a sample pedigree (must be numeric and ordered 1 to n)\nped = DataFrame(\n    animal = [1, 2, 3, 4, 5, 6], \n    sire   = [0, 0, 1, 1, 4, 5],\n    dam    = [0, 0, 2, 0, 3, 2]\n)\n\n# Create the A matrix\nA = makeA(ped)","category":"page"},{"location":"makeA/#Arguments","page":"Make A Matrix","title":"Arguments","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"ped::DataFrame: A DataFrame with 3 columns:\nAnimal ID (must be integers from 1 to n)\nSire ID (0 for unknown)\nDam ID (0 for unknown)","category":"page"},{"location":"makeA/#Requirements","page":"Make A Matrix","title":"Requirements","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"The pedigree must be sorted so that parents appear before their offspring\nAnimal IDs must be integers from 1 to n\nMissing parents must be coded as 0","category":"page"},{"location":"makeA/#Returns","page":"Make A Matrix","title":"Returns","text":"","category":"section"},{"location":"makeA/","page":"Make A Matrix","title":"Make A Matrix","text":"A square matrix representing the additive genetic relationships between all individuals in the pedigree.","category":"page"}]
}
